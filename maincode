# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
import joblib

# Load the dataset
df = pd.read_csv('telco_customer_churn.csv')

# Preview the data
print("Dataset Preview:")
print(df.head())

# Data Preprocessing
# Drop customer ID column as it does not provide useful information for predictions
df.drop(['customerID'], axis=1, inplace=True)

# Convert categorical variables to numerical values
for column in df.columns:
    if df[column].dtype == 'object':
        if len(df[column].unique()) <= 2:
            df[column] = LabelEncoder().fit_transform(df[column])
        else:
            df = pd.get_dummies(df, columns=[column])

# Fill missing values if any
df.fillna(df.mean(), inplace=True)

# Split dataset into features and labels
X = df.drop('Churn', axis=1)
y = df['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)  # Convert 'Yes'/'No' to 1/0

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Training
print("\nTraining Random Forest Classifier...")
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
print("\nModel Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Save the model
joblib.dump(model, 'customer_churn_model.pkl')
print("\nModel saved as 'customer_churn_model.pkl'")
